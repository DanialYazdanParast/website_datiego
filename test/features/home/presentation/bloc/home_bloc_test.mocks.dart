// Mocks generated by Mockito 5.4.4 from annotations
// in datiego/test/features/home/presentation/bloc/home_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:datiego/features/home/domain/repository/file_downloader_repository.dart'
    as _i3;
import 'package:datiego/features/home/domain/use_cases/download_file_usecase.dart'
    as _i7;
import 'package:datiego/features/shared/domain/entities/projects_entities.dart'
    as _i6;
import 'package:datiego/features/shared/domain/repository/projects_repository.dart'
    as _i2;
import 'package:datiego/features/shared/domain/use_cases/get_projects_usecase.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProjectsRepository_0 extends _i1.SmartFake
    implements _i2.ProjectsRepository {
  _FakeProjectsRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileDownloaderRepository_1 extends _i1.SmartFake
    implements _i3.FileDownloaderRepository {
  _FakeFileDownloaderRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetProjectsUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProjectsUsecase extends _i1.Mock
    implements _i4.GetProjectsUsecase {
  MockGetProjectsUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProjectsRepository get projectsRepository => (super.noSuchMethod(
        Invocation.getter(#projectsRepository),
        returnValue: _FakeProjectsRepository_0(
          this,
          Invocation.getter(#projectsRepository),
        ),
      ) as _i2.ProjectsRepository);

  @override
  _i5.Future<List<_i6.ProjectsEntities>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Future<List<_i6.ProjectsEntities>>.value(
            <_i6.ProjectsEntities>[]),
      ) as _i5.Future<List<_i6.ProjectsEntities>>);
}

/// A class which mocks [DownloadFileUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDownloadFileUseCase extends _i1.Mock
    implements _i7.DownloadFileUseCase {
  MockDownloadFileUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FileDownloaderRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeFileDownloaderRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.FileDownloaderRepository);

  @override
  _i5.Future<void> call(
    String? url,
    String? fileName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            url,
            fileName,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
